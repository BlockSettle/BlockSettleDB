syntax = "proto2";

package Codec_ClientProto;

enum Methods
{
    shutdown = 1;

    setupDB = 10;
    goOnline = 11;
    registerWallets = 12;
    registerWallet = 13;

    loadWallets = 20;
    getNodeStatus = 21;
    returnPassphrase = 22;
    broadcastTx = 23;

    getLedgerDelegateIdForWallets = 30;
    updateWalletsLedgerFilter = 31;
    getLedgerDelegateIdForScrAddr = 32;

    getHistoryPageForDelegate = 40;
    getBalanceAndCount = 41;
    getAddrCombinedList = 42;
    getHistoryForWalletSelection = 43;

    getTxByHash = 70;
    getHeaderByHeight = 71;
    createAddressBook = 72;
    setComment = 73;
    setWalletLabels = 74;

    getNewAddress = 80;
    getChangeAddress = 81;
    peekChangeAddress = 82;
    getHighestUsedIndex = 83;
    extendAddressPool = 84;
    createWallet = 85;
    createBackupStringForWallet = 86;
    deleteWallet = 87;
    getWalletData = 88;

    generateRandomHex = 90;
    getTxInScriptType = 91;
    getTxOutScriptType = 92;
    getScrAddrForScript = 93;
    getLastPushDataInScript = 94;
    getTxOutScriptForScrAddr = 95;
    getAddrStrForScrAddr = 96;
    getNameForAddrType = 97;
    setAddressTypeFor = 98;
    getScrAddrForAddrStr = 99;

    getUtxosForValue = 100;
    getSpendableZCList = 101;
    getRBFTxOutList = 102;

    setupNewCoinSelectionInstance = 110;
    destroyCoinSelectionInstance = 111;
    resetCoinSelection = 112;
    setCoinSelectionRecipient = 113;
    cs_SelectUTXOs = 114;
    cs_getUtxoSelection = 115;
    cs_getFlatFee = 116;
    cs_getFeeByte = 117;
    cs_getSizeEstimate = 118;
    cs_ProcessCustomUtxoList = 119;
    cs_getFeeForMaxVal = 120;
    cs_getFeeForMaxValUtxoVector = 121;

    initNewSigner = 130;
    destroySigner = 131;
    signer_SetVersion = 132;
    signer_SetLockTime = 133;
    signer_addSpenderByOutpoint = 134;
    signer_populateUtxo = 135;
    signer_addRecipient = 136;
    signer_toTxSigCollect = 137;
    signer_fromTxSigCollect = 138;
    signer_signTx = 139;
    signer_getSignedTx = 140;
    signer_getUnsignedTx = 141;
    signer_getSignedStateForInput = 142;
    signer_resolve = 143;
    signer_addSupportingTx = 144;
    signer_fromType = 145;
    signer_canLegacySerialize = 146;

    getHash160 = 200;
    getBlockTimeByHeight = 201;
    estimateFee = 202;

    methodWithCallback = 220;
}

enum MethodsWithCallback
{
    followUp = 1;
    cleanup = 2;
    
    restoreWallet = 10;
}

message ClientCommand
{
    required Methods method = 1;
    required uint32 payloadId = 2;

    repeated string stringArgs = 3;
    repeated uint32 intArgs = 4;
    repeated bytes byteArgs = 5;
    repeated uint64 longArgs = 6;
    repeated float floatArgs = 7;

    optional MethodsWithCallback methodWithCallback = 10;
}

////////////////////////////////////////////////////////////////////////////////
// wallet public data
message WalletAsset
{
    required int32 id = 1;
    required uint32 addrType = 2;
    required bool isUsed = 3;
    required bool isChange = 4;
    required bytes assetId = 5;

    required bytes prefixedHash = 10;
    required bytes publicKey = 11;
    optional bytes precursorScript = 12;

    required string addressString = 20;
}

message WalletData
{
    required string id = 1;
    required int64 useCount = 2;
    required int64 lookupCount = 3;
    required bool watchingOnly = 4;
    repeated uint32 addressTypes = 5;
    required uint32 defaultAddressType = 6;

    optional string label = 10;
    optional string desc = 11;

    repeated WalletAsset assets = 20;

    message Comment
    {
        required bytes key = 1;
        required bytes val = 2;
    }

    repeated Comment comments = 30;
}

message WalletPayload
{
    repeated WalletData wallets = 1;
}

////////////////////////////////////////////////////////////////////////////////
// BDV callback
message CppBridgeCallbackMsg
{
    required uint32 type = 1;

    optional uint32 height = 10;
    repeated string ids = 11;
    
    repeated bytes opaque = 20;
}

message CppProgressCallbackMsg
{
    optional uint32 phase = 1;
    required float progress = 2;
    optional uint32 etaSec = 3;
    required uint32 progressNumeric = 4;

    repeated string ids = 10;
}

////////////////////////////////////////////////////////////////////////////////
// Unlock prompt
enum UnlockPromptState
{
    start = 1;
    stop = 2;
    cycle = 3;
}

enum UnlockPromptType
{
    decrypt = 1;
    migrate = 2;
}

message UnlockPromptCallback
{
    required bytes promptID = 1;
    required UnlockPromptType promptType = 2;
    required string verbose = 3;
    required UnlockPromptState state = 4; 
    optional string walletID = 5;
}

////////////////////////////////////////////////////////////////////////////////
message BridgeLedger
{
    required int64 value = 1;
    required bytes hash = 2;
    required string id = 3;
    required uint32 height = 4;
    required uint32 txIndex = 5;
    required uint32 txTime = 6;
    required bool isCoinbase = 7;
    required bool isSentToSelf = 8;
    required bool isChangeBack = 9;
    required bool isChainedZC = 10;
    required bool isWitness = 11;
    required bool isRBF = 12;
    repeated bytes scrAddrList = 13;
}

message BridgeLedgers
{
    repeated BridgeLedger le = 1;
}

message BridgeNodeChainStatus
{
    required uint32 chainState = 2;
    required float blockSpeed = 3;
    required float progressPct = 4;
    required uint64 eta = 5;
    required uint32 blocksLeft = 6;
}

message BridgeNodeStatus
{
    required bool isValid = 1;
    
    optional uint32 nodeState = 10;
    optional bool isSegWitEnabled = 11;
    optional uint32 rpcState = 12;
    optional BridgeNodeChainStatus chainStatus = 13;
}

message BridgeBalanceAndCount
{
    required uint64 full = 1;
    required uint64 spendable = 2;
    required uint64 unconfirmed = 3;
    required uint64 count = 4;
}

message BridgeMultipleBalanceAndCount
{
    repeated bytes ids = 1;
    repeated BridgeBalanceAndCount data = 2;
    repeated WalletAsset updatedAssets = 3;
}

message BridgeTx
{
    required bool isValid = 1;
    optional bytes raw = 2;

    optional uint32 height = 10;
    optional uint32 txIndex = 11;

    optional bool isRBF = 20;
    optional bool isChainedZC = 21;
}

message ReplyBinary
{
    repeated bytes reply = 30;
}

message ReplyStrings
{
    repeated string reply = 31;
}

message ReplyNumbers
{
    repeated uint32 ints = 40;
    repeated uint64 longs = 41;
    repeated float  floats = 42;
}

message BridgeAddressBookEntry
{
    required bytes scrAddr = 1;
    repeated bytes txHashes = 2;
}

message BridgeAddressBook
{
    repeated BridgeAddressBookEntry data = 1;
}

message BridgeUtxo
{
   required bytes txHash = 1;
   required uint32 txOutIndex = 2;

   required uint64 value = 3;
   required uint32 txHeight = 4;
   required uint32 txIndex = 5;
   
   required bytes script = 6;
   required bytes scrAddr = 7;
}

message BridgeUtxoList
{
    repeated BridgeUtxo data = 1;
}

message BridgeInputSignedState
{
    required bool isValid = 1;
    required uint32 m = 2;
    required uint32 n = 3;

    required uint32 sigCount = 10;
    repeated PubKeySignatureState signStateList = 11;

    message PubKeySignatureState
    {
        required bytes pubKey = 1;
        required bool hasSig = 2;
    }
}

message ReplyError
{
    required bool isError = 24;
    required string error = 25;
    optional uint32 code = 26;
}

message BridgeFeeEstimate
{
    required float feeByte = 1;
    optional bool smartFee = 2;
    optional string error = 3;
}

////////////////////////////////////////////////////////////////////////////////
// Wallet creation messages
message BridgeCreateWalletStruct
{
    required uint32 lookup = 1;

    optional string passphrase = 10;
    optional string controlPassphrase = 11;

    optional bytes extraEntropy = 20;

    optional string label = 30;
    optional string description = 31;
}

message BridgeBackupString
{
    required bool isvalid = 1;
    
    repeated string rootclear = 10;
    repeated string chainclear = 11;

    repeated string rootencr = 20;
    repeated string chainencr = 21;

    optional string sppass = 5;
}

////////////////////////////////////////////////////////////////////////////////
// Opaque payloads

enum OpaquePayloadType
{
    prompt = 1;
    commandWithCallback = 2;
}

message OpaquePayload
{
    required OpaquePayloadType payloadType = 1;
    optional bytes uniqueId = 2;
    optional uint32 intId = 3;

    optional bytes payload = 10;
}

////////////////////////////////////////////////////////////////////////////////
// RestoreWallet messages
message RestoreWalletPayload
{
    repeated string root = 1;
    repeated string secondary = 2;
    optional string spPass = 3;
}

enum RestorePromptType
{
    FormatError = 1;
    Failure = 2;
    ChecksumError = 3;
    DecryptError = 4;
    Passphrase = 5;
    Control = 6;
    Id = 7;
    TypeError = 8;
    Success = 9;
    UnknownError = 10;
}

message RestorePrompt
{

    required RestorePromptType promptType = 1;
    repeated int32 checksums = 2;
    optional string extra = 3;
}

message RestoreReply
{
    required bool result = 1;
    optional bytes extra = 2;
}
