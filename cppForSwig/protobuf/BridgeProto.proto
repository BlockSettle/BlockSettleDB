syntax = "proto2";

package BridgeProto;

////////////////////////////////////////////////////////////////////////////////
// RestoreWallet messages
message RestoreWalletPayload
{
    repeated string root = 1;
    repeated string secondary = 2;
    optional string spPass = 3;
}

enum RestorePromptType
{
    FormatError = 1;
    Failure = 2;
    ChecksumError = 3;
    DecryptError = 4;
    Passphrase = 5;
    Control = 6;
    Id = 7;
    TypeError = 8;
    Success = 9;
    UnknownError = 10;
}

message RestorePrompt
{

    required RestorePromptType promptType = 1;
    repeated int32 checksums = 2;
    optional string extra = 3;
}

message RestoreReply
{
    required bool result = 1;
    optional bytes extra = 2;
}

////////////////////////////////////////////////////////////////////////////////
//
//// Data types
//
////////////////////////////////////////////////////////////////////////////////
message Ledger
{
    required int64  value           = 1;
    required bytes  hash            = 2;
    required string id              = 3;
    required uint32 height          = 4;
    required uint32 tx_index        = 5;
    required uint32 tx_time         = 6;
    required bool   coinbase        = 7;
    required bool   sent_to_self    = 8;
    required bool   change_back     = 9;
    required bool   chained_zc      = 10;
    required bool   witness         = 11;
    required bool   rbf             = 12;
    repeated bytes  scraddr         = 13;
}

message NodeStatus
{
    message NodeChainStatus
    {
        required uint32 chain_state  = 2;
        required float  block_speed  = 3;
        required float  progress_pct = 4;
        required uint64 eta          = 5;
        required uint32 blocks_left  = 6;
    }

    required bool               is_valid            = 1;
    optional uint32             node_state          = 10;
    optional bool               is_segwit_enabled   = 11;
    optional uint32             rpc_state           = 12;
    optional NodeChainStatus    chain_status        = 13;
}

message Utxo
{
    required bytes  tx_hash     = 1;
    required uint32 txout_index = 2;

    required uint64 value       = 3;
    required uint32 tx_height   = 4;
    required uint32 tx_index    = 5;

    required bytes  script      = 6;
    required bytes  scraddr     = 7;
}

////////////////////////////////////////////////////////////////////////////////
// 
//// Callbacks
//
////////////////////////////////////////////////////////////////////////////////

message CallbackPush
{
    message Ready {
        required uint32 height = 1;
    }
    message SetupDone{}
    message Disconnected{}

    message Registered {
        repeated string id = 1;
    }

    message Refresh {
        repeated string id = 1;
    }

    message NewBlock {
        required uint32 height = 1;
    }

    message Progress {
        optional uint32 phase               = 1;
        required float  progress            = 2;
        optional uint32 eta_sec             = 3;
        required uint32 progress_numeric    = 4;

        repeated string id                  = 10;
    }

    message ZeroConf {
        repeated Ledger ledger = 1;
    }

    ////
    message UnlockRequest {
        repeated string encryption_key_ids = 1;
    }

    ////
    required string callback_id     = 1;
    optional uint32 reference_id    = 2;

    oneof push_payload {
        Ready           ready           = 10;
        SetupDone       setup_done      = 11;
        Registered      registered      = 12;
        Refresh         refresh         = 13;
        NewBlock        new_block       = 14;
        Disconnected    disconnected    = 15;
        Progress        progress        = 20;
        NodeStatus      node_status     = 21;
        ZeroConf        zero_conf       = 22;
        string          error           = 30;
        bool            cleanup         = 40;
        UnlockRequest   unlock_request  = 41;
    }
}

message CallbackReply
{
    required bool   success         = 1;
    required uint32 reference_id    = 2;

    oneof reply_payload {
        string passphrase           = 10;
    }
}

////////////////////////////////////////////////////////////////////////////////
//
//// Request
//
////////////////////////////////////////////////////////////////////////////////
message BlockchainService
{
    message LoadWallets {
        required string callback_id = 1;
    }
    message RegisterWallet {
        required string id    = 1;
        required bool   is_new = 2;
    }

    message BroadcastTx {
        repeated bytes raw_tx = 1;
    }
    message GetTxByHash {
        required bytes tx_hash = 1;
    }
    message GetHeaderByHeight {
        required uint32 height = 1;
    }
    message GetBlockTimeByHeight {
        required uint32 height = 1;
    }
    message EstimateFee {
        required uint32 blocks = 1;
        required string strat  = 2;
    }

    message UpdateWalletsLedgerFilter {
        repeated string wallet_id = 1;
    }

    message GetHistoryPageForDelegate {
        required string delegate_id = 1;
        required uint32 page_id     = 2;
    }

    message GetHistoryForWalletSelection {
        repeated string wallet_id  = 1;
        required string order      = 2;
    }

    ////
    oneof method {
        bool        shutdown            = 1;
        bool        setup_db            = 2;
        bool        go_online           = 3;
        bool        get_node_status     = 4;
        LoadWallets load_wallets        = 5;
        bool        register_wallets    = 6;

        RegisterWallet          register_wallet             = 10;
        BroadcastTx             broadcast_tx                = 11;
        GetTxByHash             get_tx_by_hash              = 12;
        GetHeaderByHeight       get_header_by_height        = 13;
        GetBlockTimeByHeight    get_block_time_by_height    = 14;
        EstimateFee             estimate_fee                = 15;

        bool                            get_ledger_delegate_id_for_wallets  = 20;
        UpdateWalletsLedgerFilter       update_wallets_ledger_filter        = 21;
        GetHistoryPageForDelegate       get_history_page_for_delegate       = 22;
        GetHistoryForWalletSelection    get_history_for_wallet_selection    = 23;
    }
}

message Wallet
{
    message GetNewAddress {
        required uint32 type = 1;
    }
    message GetChangeAddress {
        required uint32 type = 1;
    }
    message PeekChangeAddress {
        required uint32 type = 1;
    }

    message ExtendAddressPool {
        required uint32 count       = 1;
        required string callback_id = 2;
    }

    message SetAddressTypeFor {
        required bytes  asset_id     = 1;
        required uint32 address_type = 2;
    }

    message GetLedgerDelegateIdForScrAddr {
        required bytes hash = 1;
    }

    message SetupNewCoinSelectionInstance {
        required uint32 height = 1;
    }
    message GetUtxosForValue {
        required uint64 value = 1;
    }

    message SetComment {
        required bytes  hash_key = 1;
        required string comment  = 2;
    }
    message SetLabels {
        required string title       = 1;
        required string description = 2;
    }

    message CreateBackupString {
        required string callback_id = 1;
    }

    ////
    required string id = 1;
    oneof method {
        GetNewAddress       get_new_address     = 2;
        GetChangeAddress    get_change_address  = 3;
        PeekChangeAddress   peek_change_address = 4;

        bool                get_highest_used_index  = 10;
        ExtendAddressPool   extend_address_pool     = 11;

        CreateBackupString  create_backup_string    = 20;
        bool                delete                  = 21;
        bool                get_data                = 22;

        bool                get_addr_combined_list  = 30;
        SetAddressTypeFor   set_address_type_for    = 31;

        GetLedgerDelegateIdForScrAddr get_ledger_delegate_id_for_scraddr = 40;
        bool                          get_balance_and_count              = 41;

        SetupNewCoinSelectionInstance setup_new_coin_selection_instance  = 50;
        GetUtxosForValue              get_utxos_for_value                = 51;
        bool                          get_spendable_zc_list              = 52;
        bool                          get_rbf_txout_list                 = 53;

        bool        create_address_book = 60;
        SetComment  set_comment         = 61;
        SetLabels   set_labels          = 62;
    }
}

message CoinSelection
{
    message SetRecipient {
        required string address = 1;
        required uint64 value   = 2;
        required uint32 id      = 3;
    }

    message SelectUTXOs {
        required uint32 flags    = 1;
        oneof fee {
            uint64 flat_fee = 10;
            float  fee_byte = 11;
        }
    }

    message ProcessCustomUtxoList {
        repeated Utxo   utxos    = 1;
        required uint32 flags    = 2;
        oneof fee {
            uint64      flat_fee = 10;
            float       fee_byte = 11;
        }
    }

    message GetFeeForMaxVal {
        repeated Utxo   utxos    = 1;
        optional float  fee_byte = 2;
    }

    ////
    required string id = 1;
    oneof method {
        bool cleanup = 2;
        bool reset   = 3;

        SetRecipient set_recipient = 4;
        SelectUTXOs  select_utxos  = 5;

        bool get_utxo_selection  = 6;
        bool get_flat_fee        = 7;
        bool get_fee_byte        = 8;
        bool get_size_estimate   = 9;

        ProcessCustomUtxoList process_custom_utxo_list = 10;
        GetFeeForMaxVal       get_fee_for_max_val      = 11;
    }
}

message Signer
{
    message SetVersion {
        required uint32 version = 1;
    }
    message SetLockTime {
        required uint32 lock_time = 1;
    }

    message AddSpenderByOutpoint {
        required bytes  hash      = 1;
        required uint32 tx_out_id = 2;
        required uint32 sequence  = 3;
    }

    message PopulateUtxo {
        required bytes  hash        = 1;
        required bytes  script      = 2;
        required uint32 tx_out_id   = 3;
        required uint64 value       = 4;
    }

    message AddRecipient{
        required bytes  script = 1;
        required uint64 value  = 2;
    }

    message ToTxSigCollect {
        required uint32 ustx_type = 1;
    }
    message FromTxSigCollect{
        required string tx_sig_collect = 1;
    }

    message SignTx {
        required string wallet_id = 1;
        required string callback_id = 2;
    }
    message GetSignedStateForInput {
        required uint32 input_id = 1;
    }

    message Resolve {
        required string wallet_id = 1;
    }
    message AddSupportingTx {
        required bytes raw_tx = 1;
    }

    ////
    required string id = 1;
    oneof method {
        bool get_new = 2;
        bool cleanup = 3;

        SetVersion              set_version                 = 4;
        SetLockTime             set_lock_time               = 5;

        AddSpenderByOutpoint    add_spender_by_outpoint     = 6;
        PopulateUtxo            populate_utxo               = 7;
        AddRecipient            add_recipient               = 8;

        ToTxSigCollect          to_tx_sig_collect           = 9;
        FromTxSigCollect        from_tx_sig_collect         = 10;

        SignTx                  sign_tx                     = 11;
        bool                    get_signed_tx               = 12;
        bool                    get_unsigned_tx             = 13;
        GetSignedStateForInput  get_signed_state_for_input  = 14;

        Resolve                 resolve                     = 15;
        AddSupportingTx         add_supporting_tx           = 16;

        bool                    from_type                   = 17;
        bool                    can_legacy_serialize        = 18;
    }
}

message Utils
{
    message GenerateRandomHex {
        required uint32 length = 1;
    }
    message GetHash160 {
        required bytes data = 1;
    }

    message GetScrAddrForAddrStr {
        required string address = 1;
    }
    message GetNameForAddrType {
        required int32 address_type = 1;
    }

    message CreateWalletStruct
    {
        required uint32 lookup              = 1;
        optional string passphrase          = 10;
        optional string control_passphrase  = 11;
        optional bytes  extra_entropy       = 20;

        optional string label       = 30;
        optional string description = 31;
    }

    oneof method {
        GenerateRandomHex       generate_random_hex     = 1;
        GetHash160              get_hash_160            = 2;

        GetScrAddrForAddrStr    get_scraddr_for_addrstr = 3;
        GetNameForAddrType      get_name_for_addr_type  = 4;

        CreateWalletStruct      create_wallet           = 5;
    }
}

message ScriptUtils
{
    message GetTxInScriptType {
        required bytes hash = 1;
    }

    ////
    required bytes script = 1;
    oneof method {
        GetTxInScriptType   get_txin_script_type            = 2;
        bool                get_txout_script_type           = 3;

        bool                get_scraddr_for_script          = 10;
        bool                get_last_push_data_in_script    = 11;
        bool                get_txout_script_for_scraddr    = 12;
        bool                get_addrstr_for_scraddr         = 13;
    }
}

message Request
{
    required uint32 reference_id = 1;

    oneof method {
        BlockchainService   service         = 20;
        Wallet              wallet          = 21;
        CoinSelection       coin_selection  = 22;
        Signer              signer          = 23;
        Utils               utils           = 24;
        ScriptUtils         script_utils    = 25;
        CallbackReply       callback_reply  = 30;
    }
}

////////////////////////////////////////////////////////////////////////////////
//
//// Replies
//
////////////////////////////////////////////////////////////////////////////////
message BlockchainServiceReply
{
    message FeeEstimate
    {
        required float  fee_byte     = 1;
        required bool   smart_fee    = 2;
    }

    message LedgerHistory {
        repeated Ledger ledger = 1;
    }

    message Tx
    {
        required bytes  raw         = 2;
        optional uint32 height      = 10;
        optional uint32 tx_index    = 11;
        optional bool   rbf         = 20;
        optional bool   chained_zc  = 21;
    }

    //
    oneof reply {
        uint32              block_time          = 10;
        string              ledger_delegate_id  = 11;
        bytes               header_data         = 12;
        FeeEstimate         fee_estimate        = 13;
        LedgerHistory       ledger_history      = 14;
        Tx                  tx                  = 15;
        NodeStatus          node_status         = 16;
    }
}

////
message WalletReply
{
    message UtxoList {
        repeated Utxo utxo = 1;
    }

    //address book
    message AddressBook {
        message AddressBookEntry {
            required bytes scraddr  = 10;
            repeated bytes tx_hash  = 11;
        }

        repeated AddressBookEntry address = 1;
    }

    //wallet data
    message AddressData
    {
        required int32  id              = 1;
        required uint32 addr_type       = 2;
        required bool   is_used         = 3;
        required bool   is_change       = 4;
        required bytes  asset_id        = 5;
        required bool   has_priv_key    = 6;
        required bool   use_encryption  = 7;

        required bytes prefixed_hash    = 10;
        required bytes public_key       = 11;
        optional bytes precursor_script = 12;

        required string address_string  = 20;
    }

    message WalletData
    {
        required string id                      = 1;
        required int64  use_count               = 2;
        required int64  lookup_count            = 3;
        required bool   watching_only           = 4;
        repeated uint32 address_type            = 5;
        required uint32 default_address_type    = 6;
        required bool   use_encryption          = 7;
        required uint32 kdf_mem_req             = 8;

        optional string label   = 10;
        optional string desc    = 11;

        repeated AddressData address_data = 20;

        message Comment
        {
            required bytes key = 1;
            required bytes val = 2;
        }
        repeated Comment comments = 30;
    }

    message MultipleWalletData {
        repeated WalletData wallet = 1;
    }

    message BackupString
    {
        repeated string root_clear  = 10;
        repeated string chain_clear = 11;

        repeated string root_encr   = 20;
        repeated string chain_encr  = 21;

        optional string sp_pass     = 30;
    }

    //address balance
    message AddressBalanceData {
        required bytes              id      = 1;
        required BalanceAndCount    balance = 2;
    }

    message AddressAndBalanceData {
        repeated AddressBalanceData balance         = 1;
        repeated AddressData        updated_asset   = 2;
    }

    message BalanceAndCount {
        required uint64 full        = 1;
        required uint64 spendable   = 2;
        required uint64 unconfirmed = 3;
        required uint64 count       = 4;
    }

    //
    oneof reply {
        int32                   highest_used_index          = 10;
        string                  coin_selection_id           = 11;
        string                  ledger_delegate_id          = 12;
        BalanceAndCount         balance_and_count           = 13;
        AddressAndBalanceData   address_and_balance_data    = 14;
        UtxoList                utxo_list                   = 15;
        AddressBook             address_book                = 16;

        AddressData             address_data                = 20;
        WalletData              wallet_data                 = 21;
        MultipleWalletData      multiple_wallets            = 22;
        BackupString            backup_string               = 23;
    }
}

////
message CoinSelectionReply
{
    message UtxoList {
        repeated Utxo utxo = 1;
    }

    //
    oneof reply {
        uint64      flat_fee        = 10;
        float       fee_byte        = 11;
        uint32      size_estimate   = 12;
        UtxoList    utxo_list       = 13;
    }
}

////
message SignerReply
{
    message InputSignedState {
        required bool   is_valid    = 1;
        required uint32 m           = 2;
        required uint32 n           = 3;

        required uint32 sig_count   = 10;

        message PubKeySignatureState
        {
            required bytes  pub_key = 1;
            required bool   has_sig = 2;
        }
        repeated PubKeySignatureState sign_state = 11;
    }

    //
    oneof reply {
        string              signer_id           = 10;
        uint32              from_type           = 11;
        string              tx_sig_collect      = 12;
        bytes               tx_data             = 13;
        InputSignedState    input_signed_state  = 14;
    }
}

////
message UtilsReply
{
    oneof reply {
        string random_hex          = 10;
        string address_type_name   = 11;
        string wallet_id           = 12;
        bytes  hash                = 13;
        bytes  scraddr             = 14;
    }
}

////
message ScriptUtilsReply
{
    oneof reply {
        uint32 txin_script_type    = 10;
        uint32 txout_script_type   = 11;
        string address_string      = 12;
        bytes  scraddr             = 13;
        bytes  push_data           = 14;
        bytes  script_data         = 15;
    }
}

////
message Reply
{
    required bool   success         = 1;
    optional uint32 reference_id    = 2;
    optional string error           = 3;

    oneof reply_payload {
        BlockchainServiceReply  service         = 10;
        WalletReply             wallet          = 11;
        CoinSelectionReply      coin_selection  = 12;
        SignerReply             signer          = 13;
        UtilsReply              utils           = 14;
        ScriptUtilsReply        script_utils    = 15;
    }
}

////////////////////////////////////////////////////////////////////////////////
//
//// Wrapper message
//
////////////////////////////////////////////////////////////////////////////////
message Payload
{
    oneof payload {
        Reply           reply       = 1;
        CallbackPush    callback    = 2;
    }
}