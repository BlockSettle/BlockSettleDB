# Makefile .include for Bitcoin Armory - Armory tests

# Here are some general notes to explain various code design issues.
#
# - For whatever reasons, user variables with underscores (e.g., LWS_LDFLAGS)
#   leads to complaints about GNU extensions. Use variables without underscores.
# - A lot of the libraries in LDADD/LIBADD aren't actually required by the
#   binaries. They're required by the linked libraries. Be sure to include them
#   in any new binaries.

# "#include <tr1/tuple>" causes a build error on macOS without this flag.
if BUILD_DARWIN
AM_CXXFLAGS += -DGTEST_USE_OWN_TR1_TUPLE=1
endif

# Standard gtest library
noinst_LTLIBRARIES += gtest/libgtest.la
gtest_libgtest_la_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_libgtest_la_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_libgtest_la_SOURCES = gtest/TestUtils.cpp gtest/NodeUnitTest.cpp gtest/gtest-all.cc
gtest_libgtest_la_LIBADD = $(LIBARMORYCOMMON) $(LIBARMORYCLI) \
				$(LIBBTC)
gtest_libgtest_la_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS)

# ContainerTests
bin_PROGRAMS += gtest/ContainerTests
gtest_ContainerTests_SOURCES = gtest/ContainerTests.cpp
gtest_ContainerTests_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_ContainerTests_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_ContainerTests_LDADD = gtest/libgtest.la $(LIBARMORYCOMMON) \
		 $(LIBARMORYCLI) \
		 $(LIBBTC) \
		 $(LIBPROTOBUF_STATIC)
gtest_ContainerTests_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS) -static
TESTS += gtest/ContainerTests

# UtilsTests - covers DB utils and crypto tests
bin_PROGRAMS += gtest/UtilsTests
gtest_UtilsTests_SOURCES = gtest/UtilsTests.cpp
gtest_UtilsTests_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_UtilsTests_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_UtilsTests_LDADD = gtest/libgtest.la \
			$(LIBARMORYCOMMON) \
			$(LIBCHACHA20POLY1305) \
			$(LIBARMORYCLI) \
			$(LIBHKDF) \
			$(LIBBTC) \
			$(LIBLMDBPP) \
			-llmdb \
			$(LIBPROTOBUF_STATIC) \
			$(LIBWEBSOCKETS_STATIC)
if BUILD_OPENSSL_SUPPORT
gtest_UtilsTests_LDADD += $(LIBSSL_STATIC) \
		 $(LIBCRYPTO_STATIC)
endif
if BUILD_LIBUV_SUPPORT
gtest_UtilsTests_LDADD += $(LIBUV_STATIC)
endif
if BUILD_LIBEVENT_SUPPORT
gtest_UtilsTests_LDADD += $(LIBEVENT_STATIC)
endif
if BUILD_LIBCAP_SUPPORT
gtest_UtilsTests_LDADD += $(LIBCAP_LIBS)
endif
gtest_UtilsTests_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS) -static
TESTS += gtest/UtilsTests

# DB1kIterTest - useless test
#bin_PROGRAMS += gtest/DB1kIterTest
#gtest_DB1kIterTest_SOURCES = gtest/DB1kIterTest.cpp
#gtest_DB1kIterTest_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
#gtest_DB1kIterTest_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
#gtest_DB1kIterTest_LDADD = gtest/libgtest.la $(LIBARMORYCOMMON) \
#		 $(LIBARMORYCLI) \
#		 $(LIBBTC) \
#		 $(LIBCHACHA20POLY1305) \
#		 $(LIBLMDB) \
#		 $(LIBPROTOBUF_STATIC) \
#		 $(LIBWEBSOCKETS_STATIC)
#if BUILD_OPENSSL_SUPPORT
#gtest_DB1kIterTest_LDADD += $(LIBSSL_STATIC) \
#		 $(LIBCRYPTO_STATIC)
#endif
#if BUILD_LIBUV_SUPPORT
#gtest_DB1kIterTest_LDADD += $(LIBUV_STATIC)
#endif
#if BUILD_LIBEVENT_SUPPORT
#gtest_DB1kIterTest_LDADD += $(LIBEVENT_STATIC)
#endif
#if BUILD_LIBCAP_SUPPORT
#gtest_DB1kIterTest_LDADD += $(LIBCAP_LIBS)
#endif
#gtest_DB1kIterTest_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS) -static
#TESTS += gtest/DB1kIterTest

# BIP151RekeyTest
bin_PROGRAMS += gtest/BIP151RekeyTest
gtest_BIP151RekeyTest_SOURCES = gtest/BIP151RekeyTest.cpp
gtest_BIP151RekeyTest_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_BIP151RekeyTest_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_BIP151RekeyTest_LDADD = gtest/libgtest.la $(LIBHKDF) $(LIBBTC) \
			$(LIBCHACHA20POLY1305)
gtest_BIP151RekeyTest_LDFLAGS = $(AM_LDFLAGS) $(LDFLAGS) -static
TESTS += gtest/BIP151RekeyTest

# SupernodeTests
bin_PROGRAMS += gtest/SupernodeTests
gtest_SupernodeTests_SOURCES = gtest/SupernodeTests.cpp
gtest_SupernodeTests_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_SupernodeTests_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_SupernodeTests_LDADD = gtest/libgtest.la \
			$(LIBARMORYCOMMON) \
			$(LIBARMORYCLI) \
			$(LIBLMDBPP) \
			-llmdb \
			$(LIBHKDF) \
			$(LIBBTC) \
			$(LIBCHACHA20POLY1305) \
			$(LIBPROTOBUF_STATIC) \
			$(LIBWEBSOCKETS_STATIC)
if BUILD_OPENSSL_SUPPORT
gtest_SupernodeTests_LDADD += $(LIBSSL_STATIC) \
		 $(LIBCRYPTO_STATIC)
endif
if BUILD_LIBUV_SUPPORT
gtest_SupernodeTests_LDADD += $(LIBUV_STATIC)
endif
if BUILD_LIBEVENT_SUPPORT
gtest_SupernodeTests_LDADD += $(LIBEVENT_STATIC)
endif
if BUILD_LIBCAP_SUPPORT
gtest_SupernodeTests_LDADD += $(LIBCAP_LIBS)
endif
gtest_SupernodeTests_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS) -static
TESTS += gtest/SupernodeTests

# CppBlockUtilsTests - Full node tests
bin_PROGRAMS += gtest/CppBlockUtilsTests
gtest_CppBlockUtilsTests_SOURCES = gtest/CppBlockUtilsTests.cpp
gtest_CppBlockUtilsTests_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_CppBlockUtilsTests_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_CppBlockUtilsTests_LDADD = gtest/libgtest.la \
			$(LIBARMORYCOMMON) \
			$(LIBCHACHA20POLY1305) \
			$(LIBARMORYCLI) \
			$(LIBHKDF) \
			$(LIBBTC) \
			$(LIBLMDBPP) \
			-llmdb \
			$(LIBPROTOBUF_STATIC) \
			$(LIBWEBSOCKETS_STATIC)
if BUILD_OPENSSL_SUPPORT
gtest_CppBlockUtilsTests_LDADD += $(LIBSSL_STATIC) \
		 $(LIBCRYPTO_STATIC)
endif
if BUILD_LIBUV_SUPPORT
gtest_CppBlockUtilsTests_LDADD += $(LIBUV_STATIC)
endif
if BUILD_LIBEVENT_SUPPORT
gtest_CppBlockUtilsTests_LDADD += $(LIBEVENT_STATIC)
endif
if BUILD_LIBCAP_SUPPORT
gtest_CppBlockUtilsTests_LDADD += $(LIBCAP_LIBS)
endif
gtest_CppBlockUtilsTests_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS) -static
TESTS += gtest/CppBlockUtilsTests

# ZeroConfTests - tests mempool handling
bin_PROGRAMS += gtest/ZeroConfTests
gtest_ZeroConfTests_SOURCES = gtest/ZeroConfTests.cpp
gtest_ZeroConfTests_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_ZeroConfTests_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_ZeroConfTests_LDADD = gtest/libgtest.la \
			$(LIBARMORYCOMMON) \
			$(LIBARMORYCLI) \
			$(LIBLMDBPP) \
			-llmdb \
			$(LIBHKDF) \
			$(LIBBTC) \
			$(LIBCHACHA20POLY1305) \
			$(LIBPROTOBUF_STATIC) \
			$(LIBWEBSOCKETS_STATIC)
if BUILD_OPENSSL_SUPPORT
gtest_ZeroConfTests_LDADD += $(LIBSSL_STATIC) \
		 $(LIBCRYPTO_STATIC)
endif
if BUILD_LIBUV_SUPPORT
gtest_ZeroConfTests_LDADD += $(LIBUV_STATIC)
endif
if BUILD_LIBEVENT_SUPPORT
gtest_ZeroConfTests_LDADD += $(LIBEVENT_STATIC)
endif
if BUILD_LIBCAP_SUPPORT
gtest_ZeroConfTests_LDADD += $(LIBCAP_LIBS)
endif
gtest_ZeroConfTests_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS) -static
TESTS += gtest/ZeroConfTests

# WalletTests
bin_PROGRAMS += gtest/WalletTests
gtest_WalletTests_SOURCES = gtest/WalletTests.cpp
gtest_WalletTests_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_WalletTests_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_WalletTests_LDADD = gtest/libgtest.la \
			$(LIBARMORYCOMMON) \
			$(LIBCHACHA20POLY1305) \
			$(LIBARMORYCLI) \
			$(LIBHKDF) \
			$(LIBBTC) \
			$(LIBLMDBPP) \
			-llmdb \
			$(LIBPROTOBUF_STATIC) \
			$(LIBWEBSOCKETS_STATIC)
if BUILD_OPENSSL_SUPPORT
gtest_WalletTests_LDADD += $(LIBSSL_STATIC) \
		 $(LIBCRYPTO_STATIC)
endif
if BUILD_LIBUV_SUPPORT
gtest_WalletTests_LDADD += $(LIBUV_STATIC)
endif
if BUILD_LIBEVENT_SUPPORT
gtest_WalletTests_LDADD += $(LIBEVENT_STATIC)
endif
if BUILD_LIBCAP_SUPPORT
gtest_WalletTests_LDADD += $(LIBCAP_LIBS)
endif
gtest_WalletTests_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS) -static
TESTS += gtest/WalletTests

#SignerTests
bin_PROGRAMS += gtest/SignerTests
gtest_SignerTests_SOURCES = gtest/SignerTests.cpp
gtest_SignerTests_CXXFLAGS = $(AM_CXXFLAGS) $(UNIT_TEST_CXXFLAGS) $(LIBBTC_FLAGS)
gtest_SignerTests_CPPFLAGS = $(AM_CPPFLAGS) $(INCLUDE_FILES)
gtest_SignerTests_LDADD = gtest/libgtest.la \
			$(LIBARMORYCOMMON) \
			$(LIBARMORYCLI) \
			$(LIBHKDF) \
			$(LIBBTC) \
			$(LIBCHACHA20POLY1305) \
			$(LIBLMDBPP) \
			-llmdb \
			$(LIBPROTOBUF_STATIC) \
			$(LIBWEBSOCKETS_STATIC)
if BUILD_OPENSSL_SUPPORT
gtest_SignerTests_LDADD += $(LIBSSL_STATIC) \
		 $(LIBCRYPTO_STATIC)
endif
if BUILD_LIBUV_SUPPORT
gtest_SignerTests_LDADD += $(LIBUV_STATIC)
endif
if BUILD_LIBEVENT_SUPPORT
gtest_SignerTests_LDADD += $(LIBEVENT_STATIC)
endif
if BUILD_LIBCAP_SUPPORT
gtest_SignerTests_LDADD += $(LIBCAP_LIBS)
endif
gtest_SignerTests_LDFLAGS = $(AM_LDFLAGS) $(LWSLDFLAGS) $(LDFLAGS) -static
TESTS += gtest/SignerTests
